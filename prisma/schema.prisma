generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model authors {
  id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  openlibrary_id String          @unique @db.VarChar
  name           String          @db.VarChar
  birth_date     DateTime?       @db.Date
  bio            String?
  portrait_url   String?
  death_date     DateTime?       @db.Date
  photos         String[]
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  works_authors  works_authors[]
}

model follows {
  follower_id                       String    @db.Uuid
  following_id                      String    @db.Uuid
  created_at                        DateTime? @default(now()) @db.Timestamp(6)
  updated_at                        DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  users_follows_follower_idTousers  users     @relation("follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_follows_following_idTousers users     @relation("follows_following_idTousers", fields: [following_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([follower_id, following_id])
  @@index([follower_id], map: "idx_follows_follower_id")
}

model review_likes {
  user_id    String    @db.Uuid
  review_id  String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  reviews    reviews   @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, review_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id      String         @db.Uuid
  work_id      String         @db.Uuid
  rating       Int            @db.SmallInt
  review_text  String?
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @updatedAt @db.Timestamp(6)
  review_likes review_likes[]
  users        users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  works        works          @relation(fields: [work_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, work_id], map: "unique_work_user")
  @@index([work_id], map: "idx_reviews_work_id")
}

model shelves {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String          @db.VarChar
  description   String?
  is_public     Boolean?        @default(false)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @updatedAt @db.Timestamp(6)
  user_id       String          @db.Uuid
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_shelf_user")
  works_shelves works_shelves[]

  @@unique([user_id, name], map: "user_name_unique")
}

model users {
  id                                  String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  password                            String
  bio                                 String?
  avatar_url                          String?
  username                            String         @unique @db.VarChar
  email                               String         @unique @db.VarChar
  display_name                        String?        @db.VarChar
  role                                user_role      @default(member)
  date_of_birth                       DateTime?      @db.Date
  created_at                          DateTime?      @default(now()) @db.Timestamp(6)
  deleted_at                          DateTime?      @db.Timestamp(6)
  updated_at                          DateTime?      @default(now()) @updatedAt @db.Timestamptz(6)
  follows_follows_follower_idTousers  follows[]      @relation("follows_follower_idTousers")
  follows_follows_following_idTousers follows[]      @relation("follows_following_idTousers")
  review_likes                        review_likes[]
  reviews                             reviews[]
  shelves                             shelves[]
}

model works {
  id                 String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  openlibrary_id     String          @unique @db.VarChar
  title              String
  first_publish_year Int?
  covers             String[]
  description        String?
  excerpts           String[]
  created_at         DateTime        @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  subjects           String[]        @db.VarChar
  reviews            reviews[]
  works_authors      works_authors[]
  works_shelves      works_shelves[]
}

model works_authors {
  work_id    String    @db.Uuid
  author_id  String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  authors    authors   @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  works      works     @relation(fields: [work_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([work_id, author_id])
  @@index([author_id], map: "idx_works_authors_author_id")
}

model works_shelves {
  shelf_id   String    @db.Uuid
  work_id    String    @db.Uuid
  added_at   DateTime? @default(now()) @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  shelves    shelves   @relation(fields: [shelf_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  works      works     @relation(fields: [work_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([shelf_id, work_id])
  @@index([shelf_id], map: "idx_works_shelves_shelf_id")
}

enum user_role {
  admin
  moderator
  member
}
